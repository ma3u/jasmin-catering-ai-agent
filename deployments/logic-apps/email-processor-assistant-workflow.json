{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "apiKey": {
        "type": "securestring",
        "defaultValue": "@{parameters('apiKey')}"
      },
      "assistantId": {
        "type": "string",
        "defaultValue": "asst_MN5PHipyHYPXyq3fENx7V20j"
      }
    },
    "triggers": {
      "Recurrence": {
        "type": "Recurrence",
        "recurrence": {
          "frequency": "Minute",
          "interval": 5
        }
      }
    },
    "actions": {
      "Initialize_Email_Queue": {
        "type": "InitializeVariable",
        "inputs": {
          "variables": [{
            "name": "EmailQueue",
            "type": "array",
            "value": [
              {
                "id": "@{concat('email-', utcNow('yyyyMMddHHmmss'), '-001')}",
                "from": "kunde@example.com",
                "to": "ma3u-test@email.de",
                "subject": "Catering Anfrage für Firmenevent",
                "body": "Guten Tag,\n\nwir planen ein Event für 50 Personen am 15. August 2025 in Berlin.\nBitte um ein Angebot für syrisches Catering.\n\nMit freundlichen Grüßen",
                "receivedTime": "@{utcNow()}"
              },
              {
                "id": "@{concat('email-', utcNow('yyyyMMddHHmmss'), '-002')}",
                "from": "event@beispiel.de",
                "to": "ma3u-test@email.de",
                "subject": "Hochzeit - 120 Gäste",
                "body": "Hallo,\n\nwir heiraten im September und benötigen Catering für 120 Personen.\nBitte um ein Angebot mit vegetarischen Optionen.\n\nVielen Dank",
                "receivedTime": "@{utcNow()}"
              },
              {
                "id": "@{concat('email-', utcNow('yyyyMMddHHmmss'), '-003')}",
                "from": "other@example.com",
                "to": "info@example.com",
                "subject": "Andere Email",
                "body": "Diese Email sollte ignoriert werden.",
                "receivedTime": "@{utcNow()}"
              }
            ]
          }]
        },
        "runAfter": {}
      },
      "Filter_Target_Emails": {
        "type": "Query",
        "inputs": {
          "from": "@variables('EmailQueue')",
          "where": "@equals(item()['to'], 'ma3u-test@email.de')"
        },
        "runAfter": {
          "Initialize_Email_Queue": ["Succeeded"]
        }
      },
      "Process_Filtered_Emails": {
        "type": "Foreach",
        "foreach": "@body('Filter_Target_Emails')",
        "actions": {
          "Create_Thread": {
            "type": "Http",
            "inputs": {
              "method": "POST",
              "uri": "https://jasmin-catering-resource.cognitiveservices.azure.com/openai/threads?api-version=2024-02-01",
              "headers": {
                "Content-Type": "application/json",
                "api-key": "@parameters('apiKey')"
              },
              "body": {}
            }
          },
          "Add_Message_to_Thread": {
            "type": "Http",
            "inputs": {
              "method": "POST",
              "uri": "https://jasmin-catering-resource.cognitiveservices.azure.com/openai/threads/@{body('Create_Thread')['id']}/messages?api-version=2024-02-01",
              "headers": {
                "Content-Type": "application/json",
                "api-key": "@parameters('apiKey')"
              },
              "body": {
                "role": "user",
                "content": "Catering-Anfrage erhalten:\n\nVon: @{items('Process_Filtered_Emails')['from']}\nBetreff: @{items('Process_Filtered_Emails')['subject']}\n\nAnfrage:\n@{items('Process_Filtered_Emails')['body']}\n\nBitte erstelle ein professionelles Angebot auf Deutsch für diese Anfrage."
              }
            },
            "runAfter": {
              "Create_Thread": ["Succeeded"]
            }
          },
          "Create_Run": {
            "type": "Http",
            "inputs": {
              "method": "POST",
              "uri": "https://jasmin-catering-resource.cognitiveservices.azure.com/openai/threads/@{body('Create_Thread')['id']}/runs?api-version=2024-02-01",
              "headers": {
                "Content-Type": "application/json",
                "api-key": "@parameters('apiKey')"
              },
              "body": {
                "assistant_id": "@parameters('assistantId')"
              }
            },
            "runAfter": {
              "Add_Message_to_Thread": ["Succeeded"]
            }
          },
          "Wait_for_Run_Completion": {
            "type": "Until",
            "expression": "@or(equals(body('Check_Run_Status')['status'], 'completed'), equals(body('Check_Run_Status')['status'], 'failed'), equals(body('Check_Run_Status')['status'], 'cancelled'), equals(body('Check_Run_Status')['status'], 'expired'))",
            "limit": {
              "count": 30,
              "timeout": "PT2M"
            },
            "actions": {
              "Check_Run_Status": {
                "type": "Http",
                "inputs": {
                  "method": "GET",
                  "uri": "https://jasmin-catering-resource.cognitiveservices.azure.com/openai/threads/@{body('Create_Thread')['id']}/runs/@{body('Create_Run')['id']}?api-version=2024-02-01",
                  "headers": {
                    "api-key": "@parameters('apiKey')"
                  }
                }
              },
              "Delay_2_Seconds": {
                "type": "Wait",
                "inputs": {
                  "interval": {
                    "unit": "Second",
                    "count": 2
                  }
                },
                "runAfter": {
                  "Check_Run_Status": ["Succeeded"]
                }
              }
            },
            "runAfter": {
              "Create_Run": ["Succeeded"]
            }
          },
          "Get_Thread_Messages": {
            "type": "Http",
            "inputs": {
              "method": "GET",
              "uri": "https://jasmin-catering-resource.cognitiveservices.azure.com/openai/threads/@{body('Create_Thread')['id']}/messages?api-version=2024-02-01",
              "headers": {
                "api-key": "@parameters('apiKey')"
              }
            },
            "runAfter": {
              "Wait_for_Run_Completion": ["Succeeded"]
            }
          },
          "Extract_Assistant_Response": {
            "type": "Compose",
            "inputs": "@first(body('Get_Thread_Messages')?['data'])?['content'][0]['text']['value']",
            "runAfter": {
              "Get_Thread_Messages": ["Succeeded"]
            }
          },
          "Store_Email_Draft": {
            "type": "Compose",
            "inputs": {
              "emailId": "@{items('Process_Filtered_Emails')['id']}",
              "originalEmail": "@items('Process_Filtered_Emails')",
              "threadId": "@{body('Create_Thread')['id']}",
              "runId": "@{body('Create_Run')['id']}",
              "draftResponse": "@outputs('Extract_Assistant_Response')",
              "processedAt": "@{utcNow()}",
              "status": "draft_created"
            },
            "runAfter": {
              "Extract_Assistant_Response": ["Succeeded"]
            }
          }
        },
        "runAfter": {
          "Filter_Target_Emails": ["Succeeded"]
        }
      },
      "Create_Summary": {
        "type": "Compose",
        "inputs": {
          "processed_count": "@length(body('Filter_Target_Emails'))",
          "total_emails": "@length(variables('EmailQueue'))",
          "timestamp": "@utcNow()",
          "assistant_id": "@parameters('assistantId')"
        },
        "runAfter": {
          "Process_Filtered_Emails": ["Succeeded", "Failed", "Skipped"]
        }
      }
    },
    "outputs": {}
  }
}